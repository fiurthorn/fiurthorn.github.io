// Mocks generated by Mockito 5.0.10 from annotations
// in xxo/test/xxo_test.dart.
// Do not manually edit this file.

import 'package:dart_console/src/console.dart' as _i4;
import 'package:dart_console/src/enums.dart' as _i5;
import 'package:dart_console/src/key.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:xxo/src/xxo.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakePlayer extends _i1.Fake implements _i2.Player {
  @override
  String toString() => super.toString();
}

class _FakePos extends _i1.Fake implements _i2.Pos {
  @override
  String toString() => super.toString();
}

class _FakeBoard extends _i1.Fake implements _i2.Board {
  @override
  String toString() => super.toString();
}

class _FakeKey extends _i1.Fake implements _i3.Key {
  @override
  String toString() => super.toString();
}

/// A class which mocks [Player].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayer extends _i1.Mock implements _i2.Player {
  MockPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get symbol =>
      (super.noSuchMethod(Invocation.getter(#symbol), returnValue: '')
          as String);
  @override
  int get won =>
      (super.noSuchMethod(Invocation.getter(#won), returnValue: 0) as int);
  @override
  set won(int? _won) => super.noSuchMethod(Invocation.setter(#won, _won),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Board].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoard extends _i1.Mock implements _i2.Board {
  MockBoard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get won =>
      (super.noSuchMethod(Invocation.getter(#won), returnValue: false) as bool);
  @override
  _i2.Player get winner => (super.noSuchMethod(Invocation.getter(#winner),
      returnValue: _FakePlayer()) as _i2.Player);
  @override
  int get remaining =>
      (super.noSuchMethod(Invocation.getter(#remaining), returnValue: 0)
          as int);
  @override
  void operator []=(_i2.Pos? xy, _i2.Player? p) =>
      super.noSuchMethod(Invocation.method(#[]=, [xy, p]),
          returnValueForMissingStub: null);
  @override
  _i2.Player operator [](_i2.Pos? xy) =>
      (super.noSuchMethod(Invocation.method(#[], [xy]),
          returnValue: _FakePlayer()) as _i2.Player);
  @override
  bool isEmpty(_i2.Pos? xy) =>
      (super.noSuchMethod(Invocation.method(#isEmpty, [xy]), returnValue: false)
          as bool);
  @override
  int index(_i2.Pos? xy) =>
      (super.noSuchMethod(Invocation.method(#index, [xy]), returnValue: 0)
          as int);
  @override
  _i2.Pos pos(int? index) =>
      (super.noSuchMethod(Invocation.method(#pos, [index]),
          returnValue: _FakePos()) as _i2.Pos);
  @override
  String toString() => super.toString();
  @override
  _i2.Pos emptyField() =>
      (super.noSuchMethod(Invocation.method(#emptyField, []),
          returnValue: _FakePos()) as _i2.Pos);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i2.Board clone() => (super.noSuchMethod(Invocation.method(#clone, []),
      returnValue: _FakeBoard()) as _i2.Board);
  @override
  void unset(_i2.Pos? xy) => super.noSuchMethod(Invocation.method(#unset, [xy]),
      returnValueForMissingStub: null);
}

/// A class which mocks [Console].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsole extends _i1.Mock implements _i4.Console {
  MockConsole() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set rawMode(bool? value) =>
      super.noSuchMethod(Invocation.setter(#rawMode, value),
          returnValueForMissingStub: null);
  @override
  bool get rawMode =>
      (super.noSuchMethod(Invocation.getter(#rawMode), returnValue: false)
          as bool);
  @override
  int get windowWidth =>
      (super.noSuchMethod(Invocation.getter(#windowWidth), returnValue: 0)
          as int);
  @override
  int get windowHeight =>
      (super.noSuchMethod(Invocation.getter(#windowHeight), returnValue: 0)
          as int);
  @override
  set cursorPosition(_i4.Coordinate? cursor) =>
      super.noSuchMethod(Invocation.setter(#cursorPosition, cursor),
          returnValueForMissingStub: null);
  @override
  String get newLine =>
      (super.noSuchMethod(Invocation.getter(#newLine), returnValue: '')
          as String);
  @override
  void clearScreen() => super.noSuchMethod(Invocation.method(#clearScreen, []),
      returnValueForMissingStub: null);
  @override
  void eraseLine() => super.noSuchMethod(Invocation.method(#eraseLine, []),
      returnValueForMissingStub: null);
  @override
  void eraseCursorToEnd() =>
      super.noSuchMethod(Invocation.method(#eraseCursorToEnd, []),
          returnValueForMissingStub: null);
  @override
  void hideCursor() => super.noSuchMethod(Invocation.method(#hideCursor, []),
      returnValueForMissingStub: null);
  @override
  void showCursor() => super.noSuchMethod(Invocation.method(#showCursor, []),
      returnValueForMissingStub: null);
  @override
  void cursorLeft() => super.noSuchMethod(Invocation.method(#cursorLeft, []),
      returnValueForMissingStub: null);
  @override
  void cursorRight() => super.noSuchMethod(Invocation.method(#cursorRight, []),
      returnValueForMissingStub: null);
  @override
  void cursorUp() => super.noSuchMethod(Invocation.method(#cursorUp, []),
      returnValueForMissingStub: null);
  @override
  void cursorDown() => super.noSuchMethod(Invocation.method(#cursorDown, []),
      returnValueForMissingStub: null);
  @override
  void resetCursorPosition() =>
      super.noSuchMethod(Invocation.method(#resetCursorPosition, []),
          returnValueForMissingStub: null);
  @override
  void setForegroundColor(_i5.ConsoleColor? foreground) =>
      super.noSuchMethod(Invocation.method(#setForegroundColor, [foreground]),
          returnValueForMissingStub: null);
  @override
  void setBackgroundColor(_i5.ConsoleColor? background) =>
      super.noSuchMethod(Invocation.method(#setBackgroundColor, [background]),
          returnValueForMissingStub: null);
  @override
  void setForegroundExtendedColor(int? colorValue) => super.noSuchMethod(
      Invocation.method(#setForegroundExtendedColor, [colorValue]),
      returnValueForMissingStub: null);
  @override
  void setBackgroundExtendedColor(int? colorValue) => super.noSuchMethod(
      Invocation.method(#setBackgroundExtendedColor, [colorValue]),
      returnValueForMissingStub: null);
  @override
  void setTextStyle(
          {bool? bold = false,
          bool? underscore = false,
          bool? blink = false,
          bool? inverted = false}) =>
      super.noSuchMethod(
          Invocation.method(#setTextStyle, [], {
            #bold: bold,
            #underscore: underscore,
            #blink: blink,
            #inverted: inverted
          }),
          returnValueForMissingStub: null);
  @override
  void resetColorAttributes() =>
      super.noSuchMethod(Invocation.method(#resetColorAttributes, []),
          returnValueForMissingStub: null);
  @override
  void write(String? text) =>
      super.noSuchMethod(Invocation.method(#write, [text]),
          returnValueForMissingStub: null);
  @override
  void writeErrorLine(String? text) =>
      super.noSuchMethod(Invocation.method(#writeErrorLine, [text]),
          returnValueForMissingStub: null);
  @override
  void writeLine(
          [String? text,
          _i5.TextAlignment? alignment = _i5.TextAlignment.left]) =>
      super.noSuchMethod(Invocation.method(#writeLine, [text, alignment]),
          returnValueForMissingStub: null);
  @override
  _i3.Key readKey() => (super.noSuchMethod(Invocation.method(#readKey, []),
      returnValue: _FakeKey()) as _i3.Key);
  @override
  String? readLine(
          {bool? cancelOnBreak = false,
          bool? cancelOnEscape = false,
          bool? cancelOnEOF = false,
          dynamic Function(String, _i3.Key)? callback}) =>
      (super.noSuchMethod(Invocation.method(#readLine, [], {
        #cancelOnBreak: cancelOnBreak,
        #cancelOnEscape: cancelOnEscape,
        #cancelOnEOF: cancelOnEOF,
        #callback: callback
      })) as String?);
}
